window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "bground", "modulename": "bground", "kind": "module", "doc": "<h2 id=\"package-bground\">Package: BGROUND</h2>\n\n<p>Semi-automatic background subtraction.</p>\n\n<ul>\n<li>The package can subtract background in 1D-data = X,Y-data.</li>\n<li>The X,Y-data are typically saved in a file containing two (or more) columns.</li>\n</ul>\n\n<p>Sub-modules of bground package:</p>\n\n<ul>\n<li>bground.ui = simple user interface</li>\n<li>bground.iplot = create interactive plot for background removal</li>\n<li>bground.bdata = classes/data structures for background definition</li>\n<li>bground.bfunc = functions and utilities for final background removal</li>\n<li>bground.help = supplementary functions, which can print help to the package</li>\n</ul>\n\n<p>Usage of bground package:</p>\n\n<ul>\n<li>See the initial example at the top of bground.ui documentation.</li>\n</ul>\n"}, {"fullname": "bground.bdata", "modulename": "bground.bdata", "kind": "module", "doc": "<h2 id=\"module-bgroundbdata\">Module: bground.bdata</h2>\n\n<p>The module defines three simple clasess.\nThe classes keep data for the backround definition.</p>\n\n<ol>\n<li>Class XYpoints = coordinates of the user-defined bakground points.</li>\n<li>Class XYcurve = two numpy arrays defining the whole calculated bkg curve.</li>\n<li>Class bkg = complete info about the user-defined background, containing:\n<ul>\n<li>XYpoints object = the user-defined coordinates of bkg point</li>\n<li>XYcurve object = the calculated background curve</li>\n<li>a few other properties (name of file for saving bkg, type of bkg)</li>\n</ul></li>\n</ol>\n\n<p>Technical notes:</p>\n\n<ul>\n<li>The first two classes (XYpoints, XYcurve) are used just inside the 3rd one.</li>\n<li>The 3rd class (bkg) is used in module iplot = the interactive bkg definition.</li>\n<li>For a common user, the classes are behind the sceenes, completely invisible.</li>\n</ul>\n"}, {"fullname": "bground.bdata.XYpoints", "modulename": "bground.bdata", "qualname": "XYpoints", "kind": "class", "doc": "<p>XYpoints = object containing two lists X,Y.\nThe lists X,Y contain X,Y coordinates of background points.\nThis simple object is used in the following bkg object below.</p>\n"}, {"fullname": "bground.bdata.XYpoints.__init__", "modulename": "bground.bdata", "qualname": "XYpoints.__init__", "kind": "function", "doc": "<p>Initialize XYpoints object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong> (list, optional, the default is []):\nX-coordinates of user-defined background points</li>\n<li><strong>Y</strong> (list, optional, the default is []):\nY-coordinates of user-defined background points</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>New XYobject.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span><span class=\"o\">=</span><span class=\"p\">[]</span>, </span><span class=\"param\"><span class=\"n\">Y</span><span class=\"o\">=</span><span class=\"p\">[]</span></span>)</span>"}, {"fullname": "bground.bdata.XYpoints.add_point", "modulename": "bground.bdata", "qualname": "XYpoints.add_point", "kind": "function", "doc": "<p>Add one background point to XYpoints object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>Xcoord</strong> (float):\nX-coordinate of a background point.</li>\n<li><strong>Ycoord</strong> (float):\nY-coordinate of a background point.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None; just the Xcoord,Ycoord are added to XYpoints object.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Xcoord</span>, </span><span class=\"param\"><span class=\"n\">Ycoord</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.bdata.XYcurve", "modulename": "bground.bdata", "qualname": "XYcurve", "kind": "class", "doc": "<p>XYcurve = object containing two 1D numpy arrays X,Y.\nTwo arrays X,Y contain all X,Y points defining the calculated bkg curve.\nThis simple object is used in the following bkg object below.</p>\n"}, {"fullname": "bground.bdata.XYcurve.__init__", "modulename": "bground.bdata", "qualname": "XYcurve.__init__", "kind": "function", "doc": "<p>Initialize XYpoints object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong> (TYPE, optional):\nDESCRIPTION. The default is [].</li>\n<li><strong>Y</strong> (TYPE, optional):\nDESCRIPTION. The default is [].</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span><span class=\"o\">=</span><span class=\"p\">[]</span>, </span><span class=\"param\"><span class=\"n\">Y</span><span class=\"o\">=</span><span class=\"p\">[]</span></span>)</span>"}, {"fullname": "bground.bdata.XYbackground", "modulename": "bground.bdata", "qualname": "XYbackground", "kind": "class", "doc": "<p>User-defined background.</p>\n"}, {"fullname": "bground.bdata.XYbackground.__init__", "modulename": "bground.bdata", "qualname": "XYbackground.__init__", "kind": "function", "doc": "<p>Initialize background.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>basename</strong> (str):\nBasename of output file = filename without extension.\nThe extension will be added automatically according to context.</li>\n<li><strong>points</strong> (bdata.XYpoints object):\nCoordinates of user-defined backround points.</li>\n<li><strong>curve</strong> (bdata.XYcurve object):\nBackround curve = X,Y of all points of the calculated background.</li>\n<li><strong>btype</strong> (string; default is 'linear'):\nBackground interpolation type\n= interpolation during backround calculation.\nImplemented interpolation types: 'linear', 'quadratic', 'cubic'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None; the result is the initialized object</strong> (bdata.bkg.):</li>\n</ul>\n\n<h6 id=\"technical-notes\">Technical notes</h6>\n\n<ul>\n<li>In function definition, we use XYpoints([],[]) and XYcurve([],[]).</li>\n<li>The empty arrays should eliminate possible non-zero values\nfrom possible previous run in Spyder.</li>\n<li>Nevertheless, in current version this is not sufficient\nand the background in the main program must be initialized\nwith empty objects XYpoints and XYcurve as well.</li>\n<li>At the moment, I regard this as a Python mystery.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">basename</span>,</span><span class=\"param\">\t<span class=\"n\">points</span><span class=\"o\">=&lt;</span><span class=\"n\">bground</span><span class=\"o\">.</span><span class=\"n\">bdata</span><span class=\"o\">.</span><span class=\"n\">XYpoints</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">curve</span><span class=\"o\">=&lt;</span><span class=\"n\">bground</span><span class=\"o\">.</span><span class=\"n\">bdata</span><span class=\"o\">.</span><span class=\"n\">XYcurve</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">btype</span><span class=\"o\">=</span><span class=\"s1\">&#39;linear&#39;</span></span>)</span>"}, {"fullname": "bground.bfunc", "modulename": "bground.bfunc", "kind": "module", "doc": "<h2 id=\"module-bgroundbfunc\">Module: bground.bfunc</h2>\n\n<p>Functions for the background calculation.</p>\n\n<ul>\n<li>The functions are usually called indirectly, from bground.iplot module.</li>\n<li>The bground.iplot module defines an interactive plot, which is used as a GUI.</li>\n</ul>\n\n<p>Technical notes:</p>\n\n<ul>\n<li>All functions in this module manipulate with bground.bdata.bkg object.\n<ul>\n<li>The bkg object contains all info needed for background subtraction.</li>\n</ul></li>\n<li>The last function works also with data = 2D-numpy array object.\n<ul>\n<li>The 2D-numpy array = a 2-row array: [X,Y] =&gt; Y should be bkgr-corrected.</li>\n<li>The last function calculates a 3-row array: [X,Y,background-corrected-Y].</li>\n</ul></li>\n</ul>\n"}, {"fullname": "bground.bfunc.sort_bkg_points", "modulename": "bground.bfunc", "qualname": "sort_bkg_points", "kind": "function", "doc": "<p>Sort background points according to their X-coordinate.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>bkg</strong> (bground.bdata.bkg object):\nA bkg object containing (among other things)\nan unsorted list of background points.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The result is the updated bkg object.\nThe updated object contains bkg.points sorted according to\ntheir X-coordinate.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bkg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.bfunc.calculate_background", "modulename": "bground.bfunc", "qualname": "calculate_background", "kind": "function", "doc": "<p>Calculate background\n= calculate interpolated background curve;\nthe calculated background curve is saved within bkg object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>data</strong> ():</p></li>\n<li><p><strong>bkg</strong> (bground.bdata.bkg object):\nObject containing the following items:</p>\n\n<ul>\n<li>basename = string, basename of output file(s)</li>\n<li>points = 3-column list: [PointType, X-coord, Y-coord]</li>\n<li>btype = a type of interpolation for the calculation of the bkground</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><p><strong>None</strong>: The result is the updated bkg object.</p>\n\n<ul>\n<li>bkg.X = calculated X-coordinates of the whole background</li>\n<li>bkg.Y = calculated Y-coordinates of the WHOLE background</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">bkg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.bfunc.subtract_background", "modulename": "bground.bfunc", "qualname": "subtract_background", "kind": "function", "doc": "<p>Subtract background\n= subtract interpolated background curve from original data;\nthe data with subtracted bkgr are added as new column to data variable.  </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (2D numpy array):\nThe array contains two colums [X,Intensity].</li>\n<li><strong>bkg</strong> (bdata.bkg object):\nThe object contains several items,\nnamely interpolated background curve.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>data</strong> (2D numpy array):\nThe array with 3 columns [X,Intensity,BackgroundCorrectedIntensity].</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">bkg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.help", "modulename": "bground.help", "kind": "module", "doc": "<h2 id=\"module-bgroundhelp\">Module: bground.help</h2>\n\n<p>Help functions for bground package.</p>\n\n<ul>\n<li>This module is a collecton if simple textual help functions.</li>\n<li>The functions are usually called within bground.ui module = from GUI.</li>\n<li>Nevertheless, they can be also called directly, without any magic:</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># A direct access to the BGROUND help functions</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">bground</span> <span class=\"k\">as</span> <span class=\"nn\">bkg</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bkg</span><span class=\"o\">.</span><span class=\"n\">help</span><span class=\"o\">.</span><span class=\"n\">print_general_description</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bkg</span><span class=\"o\">.</span><span class=\"n\">help</span><span class=\"o\">.</span><span class=\"n\">print_how_it_works</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bkg</span><span class=\"o\">.</span><span class=\"n\">help</span><span class=\"o\">.</span><span class=\"n\">print_all_keyboard_shortcuts</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bkg</span><span class=\"o\">.</span><span class=\"n\">help</span><span class=\"o\">.</span><span class=\"n\">print_info_about_additional_help_on_www</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n"}, {"fullname": "bground.help.print_general_description", "modulename": "bground.help", "qualname": "print_general_description", "kind": "function", "doc": "<p>Print help - BGROUND package :: General description</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.help.print_how_it_works", "modulename": "bground.help", "qualname": "print_how_it_works", "kind": "function", "doc": "<p>Print help - BGROUND package :: How does it work?'</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.help.print_all_keyboard_shortcuts", "modulename": "bground.help", "qualname": "print_all_keyboard_shortcuts", "kind": "function", "doc": "<p>Print help - BGROUND :: Interactive plot :: Keyboard shortcuts</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output_file</span><span class=\"o\">=</span><span class=\"s1\">&#39;some_file&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.help.print_info_about_additional_help_on_www", "modulename": "bground.help", "qualname": "print_info_about_additional_help_on_www", "kind": "function", "doc": "<p>Print help - BGROUND package :: Additional help on www</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.iplot", "modulename": "bground.iplot", "kind": "module", "doc": "<h2 id=\"module-bgroundiplot\">Module: bground.iplot</h2>\n\n<p>The module with functions to create an interactive plot.</p>\n\n<p>The interactive plot can be defined/created at three levels/steps:</p>\n\n<ul>\n<li>Level 1 = func yielding the interactive plot = the plot linked with events.</li>\n<li>Level 2 = funcs for event types (such as key_press_event, close_event, ...).</li>\n<li>Level 3 = funcs for individual sub-events (such as specific keypress events).</li>\n</ul>\n\n<p>Important technical notes:</p>\n\n<ul>\n<li>We keep the (very reasonable) mouse events from Matplotlib UI.</li>\n<li>We define just <em>key_press_events</em>, with which we can do the whole job.</li>\n<li>We can define additional simple events (here: <em>close_event</em> = on closing).</li>\n</ul>\n"}, {"fullname": "bground.iplot.interactive_plot", "modulename": "bground.iplot", "qualname": "interactive_plot", "kind": "function", "doc": "<p>Create plot from input data.</p>\n\n<p>This is a plot window, which will be made interactive later.\nIn the rest of the program, the plot will be the program interface.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (2D numpy array):\nData for plotting; columns [X,Y].</li>\n<li><strong>bkgr</strong> (bground.bdata.XYbackground object):\nAn object storing data for the background calculation.</li>\n<li><strong>ppar</strong> (bground.ui.PlotParameters object):\nAn object with data for interactive plot + name of output file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>fig,ax</strong> (maptplotlib.pyplot objects):\nThe figure and axis of the interactive plot which shows XY-data.</li>\n</ul>\n\n<h6 id=\"technical-notes\">Technical notes</h6>\n\n<p>The arguments/objects for this function (data, bkgr, ppar)\nare usually defined by means of a simple OO-interface\nbefore this function is called.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">bkgr</span>, </span><span class=\"param\"><span class=\"n\">ppar</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.iplot.on_keypress", "modulename": "bground.iplot", "qualname": "on_keypress", "kind": "function", "doc": "<p>Definition of key_press_events for a plot.</p>\n\n<p>The callback function, which defines all keypress events.\nThe functions for the individual keypress events are defined below.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">event</span>, </span><span class=\"param\"><span class=\"n\">fig</span>, </span><span class=\"param\"><span class=\"n\">ax</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">bkgr</span>, </span><span class=\"param\"><span class=\"n\">ppar</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.iplot.on_close", "modulename": "bground.iplot", "qualname": "on_close", "kind": "function", "doc": "<p>Definition of on_close event of the plot.</p>\n\n<p>The simple callback function, which runs\nwhen the interactive plot window is closed.\nThe function just prints some concluding remarks\nand information about the output files.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">event</span>, </span><span class=\"param\"><span class=\"n\">ppar</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.iplot.add_bkg_point", "modulename": "bground.iplot", "qualname": "add_bkg_point", "kind": "function", "doc": "<p>Function for keypress = '1'.</p>\n\n<p>Add background point at current mouse position.\nMore precisely: add a background point at the the XY-curve,\nwhose X-coordinate is the closest to the mouse X-coordinate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">plt</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">bkgr</span>, </span><span class=\"param\"><span class=\"n\">ppar</span>, </span><span class=\"param\"><span class=\"n\">xm</span>, </span><span class=\"param\"><span class=\"n\">ym</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.iplot.del_bkg_point_close_to_mouse", "modulename": "bground.iplot", "qualname": "del_bkg_point_close_to_mouse", "kind": "function", "doc": "<p>Function for keypress = '2'.</p>\n\n<p>Remove the background point close to mouse cursor position.\nMore precisely: remove the background point from the XY-curve,\nwhose X-coordinate is the closest to the mouse cursor X-coordinate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">plt</span>, </span><span class=\"param\"><span class=\"n\">bkgr</span>, </span><span class=\"param\"><span class=\"n\">ppar</span>, </span><span class=\"param\"><span class=\"n\">xm</span>, </span><span class=\"param\"><span class=\"n\">ym</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.iplot.replot_with_bkg_points", "modulename": "bground.iplot", "qualname": "replot_with_bkg_points", "kind": "function", "doc": "<p>Function for keypress = '3'.</p>\n\n<p>Re-draw plot with backround points.\nAdditional keyword parameter (points_reloaded=False),\nis employed if the function is called from load_bkg_points function.\nThe load_bkg_points function uses its own short message\nand sets points_reloaded=True to avoid additional confusing messaging.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">plt</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">bkgr</span>, </span><span class=\"param\"><span class=\"n\">ppar</span>, </span><span class=\"param\"><span class=\"n\">points_reloaded</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.iplot.replot_with_bkg", "modulename": "bground.iplot", "qualname": "replot_with_bkg", "kind": "function", "doc": "<p>Function for keypress = '4,5,6'.</p>\n\n<p>Re-draw plot with backround points and background curve.\nType of the curve is given by parameter btype.\nFor key = 4/5/6 the function called with btype = linear/quadratic/cubic.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">plt</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">bkgr</span>, </span><span class=\"param\"><span class=\"n\">ppar</span>, </span><span class=\"param\"><span class=\"n\">btype</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.iplot.load_bkg_points", "modulename": "bground.iplot", "qualname": "load_bkg_points", "kind": "function", "doc": "<p>Function for keypress = 'a'.</p>\n\n<p>Load background points from previously saved file.\nAssumption: the file has been saved with save_bkg_points function,\nwhich means that its name is fixed and known (bkgr.basename + '.bkg').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">plt</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">bkgr</span>, </span><span class=\"param\"><span class=\"n\">ppar</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.iplot.save_bkg_points", "modulename": "bground.iplot", "qualname": "save_bkg_points", "kind": "function", "doc": "<p>Function for keypress = 'b'.</p>\n\n<p>Save background points to file.\nThe output file name is bkgr.basename + extension 'bkg'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bkgr</span>, </span><span class=\"param\"><span class=\"n\">ppar</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.iplot.subtract_bkg_and_save", "modulename": "bground.iplot", "qualname": "subtract_bkg_and_save", "kind": "function", "doc": "<p>Function for keypress 't'.</p>\n\n<p>This is the final function which:</p>\n\n<ul>\n<li>Recalculates recently defined background</li>\n<li>Calculates background-corrected data = subtracts bkg from data</li>\n<li>Saves the results to TXT-file with 3 cols [X, Y, bkg-corrected-Y]</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">plt</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">bkgr</span>, </span><span class=\"param\"><span class=\"n\">ppar</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.iplot.save_PNG_image", "modulename": "bground.iplot", "qualname": "save_PNG_image", "kind": "function", "doc": "<p>Function for keypress 's'.</p>\n\n<p>Special case - 's' is Matplotlib UI shortcut,\nwhich saves PNG image of the current (interactive) plot.</p>\n\n<p>As key_press_event 's' was NOT disconnected from the plot,\nthe following two things are going to happen:</p>\n\n<ul>\n<li>At first, the default event (saving as PNG) will take place.</li>\n<li>At second, this function prints a message on stdout (if requested).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ppar</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.iplot.initialize_interactive_plot_parameters", "modulename": "bground.iplot", "qualname": "initialize_interactive_plot_parameters", "kind": "function", "doc": "<p>Initialize parameters of the interactive plot.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.iplot.print_brief_help", "modulename": "bground.iplot", "qualname": "print_brief_help", "kind": "function", "doc": "<p>Print ultra-brief help before activating the interactive plot.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ppar</strong> ():\nIt is used just to get the value of ppar.messages.\nIf ppar.messages == True, additional empty line is printed.\nReason: To separate the introductory help from the following messages.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The output is the brief help printed on stdout.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ppar</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.iplot.find_nearest", "modulename": "bground.iplot", "qualname": "find_nearest", "kind": "function", "doc": "<p>Auxiliary function:\nFind the index of the element with the nearest {value} in 1D-array.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arr</strong> (1D numpy array):\nThe array, in which we search the element with closest value.\nImportant prerequisite: the array must be sorted.</li>\n<li><strong>value</strong> (float):\nThe value, for which we search the closest element.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>idx</strong> (int):\nIndex of the element with the closest value.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.iplot.clear_plot", "modulename": "bground.iplot", "qualname": "clear_plot", "kind": "function", "doc": "<p>Auxilliary function: clear interactive plot before re-drawing.</p>\n\n<p>Key feature of the function:\nIt keeps current labels and XY-limits of the plot.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.iplot.bkg_to_df", "modulename": "bground.iplot", "qualname": "bkg_to_df", "kind": "function", "doc": "<p>Auxiliary function: Convert current background points to dataframe.</p>\n\n<p>Why this function?\n=&gt; df can be used to save/restore background points nicely.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bkgr</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.ui", "modulename": "bground.ui", "kind": "module", "doc": "<h2 id=\"module-bgroundui\">Module: bground.ui</h2>\n\n<p>The module defines a UI (user interface) for BGROUND package.</p>\n\n<ul>\n<li>Strictly speaking,\nthe module defines API (application programming interface).</li>\n<li>Nevertheless,\nthe API can be employed as a simple UI within Spyder and/or Jupyter scripts.</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Simple usage of BGROUND package</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (before running in Spyder, switch to interactive plots: %matplotlib qt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (after finishing, switch back to non-interactive: %matplotlib inline</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Import user interface of background package</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">bground.ui</span> <span class=\"k\">as</span> <span class=\"nn\">bkg</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Define I/O files</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">INFILE</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ed1_raw.txt&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">OUFILE</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ed2_bcorr.txt&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Define data, plot parameters and interactive plot</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">DATA</span> <span class=\"o\">=</span> <span class=\"n\">bkg</span><span class=\"o\">.</span><span class=\"n\">InputData</span><span class=\"p\">(</span><span class=\"n\">INFILE</span><span class=\"p\">,</span> <span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">unpack</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PPAR</span> <span class=\"o\">=</span> <span class=\"n\">bkg</span><span class=\"o\">.</span><span class=\"n\">PlotParams</span><span class=\"p\">(</span><span class=\"n\">OUFILE</span><span class=\"p\">,</span><span class=\"s1\">&#39;Pixel&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;Intensity&#39;</span><span class=\"p\">,</span><span class=\"n\">xlim</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">200</span><span class=\"p\">],</span><span class=\"n\">ylim</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">180</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">IPLOT</span> <span class=\"o\">=</span> <span class=\"n\">bkg</span><span class=\"o\">.</span><span class=\"n\">InteractivePlot</span><span class=\"p\">(</span><span class=\"n\">DATA</span><span class=\"p\">,</span> <span class=\"n\">PPAR</span><span class=\"p\">,</span> <span class=\"n\">CLI</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Run the interactive plot, by means of which we will remove the backround</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (a new window with an interactive plot will be opened</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (basic instructions + link to complete docs will be printed on stdout</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (ouput files will be saved by the user during the interactive processing </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">IPLOT</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n"}, {"fullname": "bground.ui.set_plot_parameters", "modulename": "bground.ui", "qualname": "set_plot_parameters", "kind": "function", "doc": "<p>Set global plot parameters (mostly for plotting in Jupyter).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>size</strong> (tuple of two floats, optional, the default is (8,6)):\nSize of the figure (width, height) in [cm].</li>\n<li><strong>dpi</strong> (int, optional, the defalut is 100):\nDPI of the figure.</li>\n<li><strong>fontsize</strong> (int, optional, the default is 8):\nSize of the font used in figure labels etc.</li>\n<li><strong>my_defaults</strong> (bool, optional, default is True):\nIf True, some reasonable additional defaults are set,\nnamely line widths and formats.</li>\n<li><strong>my_rcParams</strong> (dict, optional, default is None):\nDictionary in plt.rcParams format\ncontaining any other allowed global plot parameters.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The result is a modification of the global plt.rcParams variable.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">fontsize</span><span class=\"o\">=</span><span class=\"mi\">8</span>,</span><span class=\"param\">\t<span class=\"n\">my_defaults</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">my_rcParams</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.ui.InputData", "modulename": "bground.ui", "qualname": "InputData", "kind": "class", "doc": "<p>The input data = input file.</p>\n\n<ul>\n<li>InputData class is a simple wrapper to <code>numpy.loadtxt</code> function.</li>\n<li>All arguments from the object initialization go to this function.</li>\n<li>The exception is the auto-set of <code>unpack=True</code> if <em>unpack</em> not defined.</li>\n</ul>\n\n<p>The usage of InputData class is shown in the example above.</p>\n\n<ul>\n<li>The rest of the documentation =&gt; detailed comments in the source code.</li>\n</ul>\n"}, {"fullname": "bground.ui.PlotParams", "modulename": "bground.ui", "qualname": "PlotParams", "kind": "class", "doc": "<p>The interactive plot parameters + name of output file(s).</p>\n\n<ul>\n<li>PlotParams class defines plot parameters and output file name.</li>\n<li>The plot parameters are X,Y-axis labels + X,Y-axes ranges/limits.</li>\n<li>The output file(s) contain the background, bkgr points, and bkgr plot.</li>\n<li>The file(s) are saved by the user during the interactive bkgr processing.</li>\n</ul>\n\n<p>The usage of PlotParams class is shown in the example above.</p>\n\n<ul>\n<li>The rest of the documentation =&gt; detailed comments in the source code.</li>\n</ul>\n"}, {"fullname": "bground.ui.InteractivePlot", "modulename": "bground.ui", "qualname": "InteractivePlot", "kind": "class", "doc": "<p>The interactive plot employed in background removal.</p>\n\n<ul>\n<li>InteractivePlot class defines the interactive plot for bkgr removal.</li>\n<li>The first two arguments (DATA, PPAR) are the two classes defined above.</li>\n<li>The third argument (CLI) should be True for command-line interfaces/runs.</li>\n<li>The fourth argument (messages) determines if to print messages to stdout.</li>\n</ul>\n\n<p>The usage of InteractivePlot class is shown in the example above.</p>\n\n<ul>\n<li>The rest of the documentation =&gt; detailed comments in the source code.</li>\n<li>Selected methods have a standard documentation for the sake of clarity.</li>\n</ul>\n"}, {"fullname": "bground.ui.InteractivePlot.run", "modulename": "bground.ui", "qualname": "InteractivePlot.run", "kind": "function", "doc": "<p>Run the interactive plot.</p>\n\n<h6 id=\"technical-notes\">Technical notes</h6>\n\n<ul>\n<li>This method is very simple - it just runs the interactive plot.</li>\n<li>No parameters =&gt; everything is defined in InteractivePlot object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.ui.InteractivePlot.plot_data_before_processing", "modulename": "bground.ui", "qualname": "InteractivePlot.plot_data_before_processing", "kind": "function", "doc": "<p>Plot raw XY-data BEFORE any processing.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>title</strong> (str, optional):\nTitle of the plot.\nThe default can be changed to None (no title) or any other string.</li>\n<li><strong>grid</strong> (bool, optional, default is True):\nIf true, show grid in the plot.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The result is the plot shown on the screen.</li>\n</ul>\n\n<h6 id=\"notes-and-limitations\">Notes and limitations</h6>\n\n<ul>\n<li>This is a supplementary method of bground.ui.InteractivePlot object.</li>\n<li>The method can be used BEFORE the interactive plot is run.</li>\n<li><em>The method has a limited number of parameters</em> <br />\nas most of them are taken from calling InteractivePlot object.</li>\n<li><em>It can be used in Jupyter</em> <br />\nto visualize the background definition\nin the notebook after the interactive plot is closed\nand after we switch to non-interactive plots (%matplotlib inline).</li>\n<li><em>It will not work in CLI or Spyder</em> <br />\nbecause we cannot switch from interactive to non-interactive plots\nwithin one script.\nMoreover, there tend to be some hard-to-debug confusions\nconnected with the fact that it is not so clear, what is the\ncurrent active plot.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;Raw data before processing&#39;</span>, </span><span class=\"param\"><span class=\"n\">grid</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.ui.InteractivePlot.plot_data_with_bkgr_definition", "modulename": "bground.ui", "qualname": "InteractivePlot.plot_data_with_bkgr_definition", "kind": "function", "doc": "<p>Plot XY-data and background AFTER the interactive plot is closed.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>title</strong> (str, optional):\nTitle of the plot.\nThe default can be changed to None (no title) or any other string.</li>\n<li><strong>grid</strong> (bool, optional, default is True):\nIf true, show grid in the plot.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The result is the plot shown on the screen.</li>\n</ul>\n\n<h6 id=\"notes-and-limitations\">Notes and limitations</h6>\n\n<ul>\n<li>This is a supplementary method of bground.ui.InteractivePlot object.</li>\n<li>The method can be used AFTER the interactive plot is closed.</li>\n<li><em>The method has a limited number of parameters</em> <br />\nas most of them are taken from calling InteractivePlot object.</li>\n<li><em>It can be used in Jupyter</em> <br />\nto visualize the background definition\nin the notebook after the interactive plot is closed\nand after we switch to non-interactive plots (%matplotlib inline).</li>\n<li><em>It will not work in CLI or Spyder</em> <br />\nbecause we cannot switch from interactive to non-interactive plots\nwithin one script.\nMoreover, there tend to be some hard-to-debug confusions\nconnected with the fact that it is not so clear, what is the\ncurrent active plot.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;Data with background definition&#39;</span>, </span><span class=\"param\"><span class=\"n\">grid</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.ui.InteractivePlot.plot_data_after_bkgr_subtraction", "modulename": "bground.ui", "qualname": "InteractivePlot.plot_data_after_bkgr_subtraction", "kind": "function", "doc": "<p>Show background-corrected XY-data AFTER the interactive plot is closed.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>title</strong> (str, optional):\nTitle of the plot.\nThe default can be changed to None (no title) or any other string.</li>\n<li><strong>xlim</strong> (tuple or list with two values, default is None):\nX-axis limits [xmin,xmax].\nIf the default value is unchanged,\nthe limits are taken from self.ppar.xlim.</li>\n<li><strong>ylim</strong> (tuple or list with two values, default is None):\nY-axis limits [ymin,ymax].\nIf the default value is unchanged,\nthe limits are taken from self.ppar.xlim.</li>\n<li><strong>grid</strong> (bool, optional, default is True):\nIf the argument is True, a grid is added to the plot.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The result is the plot shown on the screen.</li>\n</ul>\n\n<h6 id=\"notes-and-limitations\">Notes and limitations</h6>\n\n<ul>\n<li>The same limitations as in the case of\nbground.ui.InteractivePlot.show_data_after_background_definition.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;Data after background subtraction&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">xlim</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ylim</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">grid</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.ui.InteractivePlot.print_general_help", "modulename": "bground.ui", "qualname": "InteractivePlot.print_general_help", "kind": "function", "doc": "<p>Print help - BGROUND :: general help</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The result is the help text printed on stdout.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.ui.InteractivePlot.print_how_it_works", "modulename": "bground.ui", "qualname": "InteractivePlot.print_how_it_works", "kind": "function", "doc": "<p>Print help - BGROUND :: How it works?</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The result is the help text printed on stdout.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.ui.InteractivePlot.print_all_keyboard_shortcuts", "modulename": "bground.ui", "qualname": "InteractivePlot.print_all_keyboard_shortcuts", "kind": "function", "doc": "<p>Print help - BGROUND :: Interactive plot :: Keyboard shortcuts</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_file</strong> (str, optional):\nName of real (or fictive) output file.\nThe name is used just in the help text.\nIt is possible to keep the default = 'output_file.txt'</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The result is the help text printed on stdout.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output_file</span><span class=\"o\">=</span><span class=\"s1\">&#39;output_file.txt&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bground.ui.InteractivePlot.print_info_about_more_help_on_www", "modulename": "bground.ui", "qualname": "InteractivePlot.print_info_about_more_help_on_www", "kind": "function", "doc": "<p>Print help - BGROUND package :: Additional help on www</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The result is the help text printed on stdout.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();